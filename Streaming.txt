from pyspark.sql import SparkSession
from pyspark.sql.functions import *
from pyspark.sql.types import *

import time

kafka_topic_name = "Successful_Transactions-topic"
kafka_bootstrap_servers = 'localhost:9092'
#kafka_bootstrap_servers = 'sandbox-hdp.hortonworks.com:6667'

if __name__ == "__main__":
    print("Stream Data Processing Application Started ...")
    print(time.strftime("%Y-%m-%d %H:%M:%S"))

    spark = SparkSession \
        .builder \
        .appName("PySpark Structured Streaming with Kafka and Message Format as JSON") \
        .master("local[*]") \
        .getOrCreate()

    spark.sparkContext.setLogLevel("ERROR")

    # Construct a streaming DataFrame that reads from test-topic
    orders_df = spark \
        .readStream \
        .format("kafka") \
        .option("kafka.bootstrap.servers", kafka_bootstrap_servers) \
        .option("subscribe", kafka_topic_name) \
        .option("startingOffsets", "latest") \
        .load()

    print("Printing Schema of orders_df: ")
    orders_df.printSchema()

    orders_df1 = orders_df.selectExpr("CAST(value AS STRING)", "timestamp")

    # Define a schema for the orders data
    orders_schema = StructType() \
        .add("order_id", IntegerType()) \
        .add("cust_id", IntegerType()) \
        .add("cust_name", StringType()) \
        .add("product_id", IntegerType()) \
        .add("product_name", StringType()) \
	.add("product_category", StringType()) \
	.add("price", IntegerType()) \
	.add("Payment_type", StringType()) \
	.add("Quantity", IntegerType()) \
	.add("order_datetime", StringType()) \
        .add("country_name", StringType()) \
        .add("city_name", StringType()) \
        .add("order_ecommerce_website_name", StringType()) \
	.add("Payment_txn_id", IntegerType()) \
	.add("Txn_Status", StringType()) \
	.add("Failure_reason", StringType()) 

    orders_df2 = orders_df1\
        .select(from_json(col("value"), orders_schema)\
        .alias("orders"))
    orders_df2.printSchema()
    
  
    orders_df3 = orders_df2.select("orders.*")
    orders_df3.printSchema()
    
    orders_df4 = orders_df3.groupBy("city_name","Payment_type") \
	.agg(sum("price").alias("Total_amount"), \
	count("order_id").alias("Total_Orders")) \
	.select("city_name","Total_orders","Payment_type","Total_amount") \
	.orderBy("city_name")

    print("Printing Schema of orders_df4: ")
    orders_df4.printSchema()
    
    orders_agg_write_stream = orders_df4 \
    	.writeStream \
    	.trigger(processingTime='20 seconds')\
    	.outputMode("complete")\
    	.option("truncate", "false")\
    	.option("numRows", 100)\
    	.format("console") \
    	.start()

    orders_agg_write_stream.awaitTermination()
    d = orders_df\
    	.writeStream\
	.format("parquet")\
	.option("path", "/tmp/parquet9")\
	.trigger(ProcessingTime='20 seconds')\
	.start()

    d.awaitTermination()

    print("Stream Data Processing Application Completed.")
